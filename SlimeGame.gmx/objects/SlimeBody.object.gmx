<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ProtoSlime</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = 0.5; 
hsp = 0; 
vsp = 0; 
jumpSpeed = 15; 
moveSpeed = 10;

face = instance_create(x,y,SlimeFace);
arm = instance_create(x,y,SlimeArm);
arm.image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Get input 
kLeft = -keyboard_check(ord('A')); 
kRight = keyboard_check(ord('D')); 
kJump = keyboard_check_pressed(ord('W'));
kGrab = mouse_check_button_pressed(mb_left);


// Use input 
move = kLeft + kRight; 
hsp = move * moveSpeed; 
if (vsp &lt; 10) {
    vsp += grav; 
};

if (place_meeting(x, y + 1, wall_parent)) {
    vsp = kJump * -jumpSpeed 
}

// H Collisions 
if (place_meeting(x + hsp, y, wall_parent)) {
    while (!place_meeting(x + sign(hsp), y, wall_parent)) {
        x += sign(hsp); 
    } hsp = 0; 
}       
x += hsp;

// v Collisions 
if (place_meeting(x, y + vsp, wall_parent)) {
    while (!place_meeting(x, y + sign(vsp), wall_parent)) {
        y += sign(vsp); 
    } 
    vsp = 0; 
}     
y += vsp;

//arm stuff
arm.x = x;
arm.y = y;
pointDirection = point_direction(x, y, mouse_x, mouse_y);
if(kGrab &amp;&amp; arm.image_speed == 0){
    arm.image_speed = 1;
    arm.image_angle = pointDirection;
}

//face stuff
face.x = x;
face.y = y;
if (hsp &gt; 0){
    face.image_xscale = 1;
}

if (hsp &lt; 0){
    face.image_xscale = -1;
}

if (vsp &gt; 0){
    face.image_yscale = -1;
}

if (vsp &lt;= 0 ){
    face.image_yscale = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
